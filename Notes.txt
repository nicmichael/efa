// @clubwork: removed from EfaBoathouseBackgroundTask.java (trigger manual, or move to Audit)
	private void checkForClubworkCarryOverAndYearlyCredit() {
		if (Daten.project != null && Daten.project.isOpen()) {
			DataTypeDate date = Daten.project.getClubworkCarryOverDate();
			if (date != null && date.isSet() && DataTypeDate.today().isAfterOrEqual(date)) {
				createClubworkCarryOverAndYearlyCredit();
			}
		}
	}

// @clubwork: removed from EfaBoathouseBackgroundTask.java (trigger manual, or move to Audit)
	private void createClubworkCarryOverAndYearlyCredit() {
		if (Daten.project == null || !Daten.project.isOpen()) {
			return;
		}
		Daten.project.setClubworkCarryOverDate(null);

		Hashtable<UUID, Double> data = new Hashtable<UUID, Double>();

		String[] names = Daten.project.getAllLogbookNames();
		for (int i=0; names != null && i<names.length; i++) {

			Clubwork clubwork = Daten.project.getClubwork(names[i], false);
			DataTypeDate lbStart = clubwork.getStartDate();
			DataTypeDate lbEnd = clubwork.getEndDate();
			if (lbStart == null || lbEnd == null) {
				continue; // should never happen
			}

			int lastYear = DataTypeDate.today().getYear()-1;

			if(clubwork != null && (lbStart.getYear() == lastYear || lbEnd.getYear() == lastYear)) {
				DataKeyIterator it;
				try {
					it = clubwork.data().getStaticIterator();
					int size = it.size();
					DataKey k = it.getFirst();
					int pos = 0;
					while (k != null) {
						ClubworkRecord r = (ClubworkRecord) clubwork.data().get(k);

						DataTypeDate date = r.getWorkDate();
						if(date.getYear() == lastYear) {
							UUID key = r.getPersonId();

							if (key == null) {
								return;
							}
							Double hours = data.get(key);
							if (hours == null) {
								hours = new Double(0);
							}

							// aggregate
							hours += r.getHours();

							data.put(key, hours);
						}
						k = it.getNext();
					}
				} catch (EfaException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

		Logbook currentLB = Daten.project.getCurrentLogbook();

		if(currentLB != null) {
			ProjectRecord pr = Daten.project.getLoogbookRecord(currentLB.getName());
			if (pr != null) {
				double sDefaultClubworkTargetHours = pr.getDefaultClubworkTargetHours();
				double sTransferableClubworkHours = pr.getTransferableClubworkHours();

				double max = sDefaultClubworkTargetHours+sTransferableClubworkHours;
				double min = sDefaultClubworkTargetHours-sTransferableClubworkHours;
				Clubwork clubwork = Daten.project.getClubwork(currentLB.getName(), false);
				long lock = -1;
				try {
					lock = clubwork.data().acquireGlobalLock();

					// Save Carry Over
					Set<UUID> set = data.keySet();

					Iterator<UUID> itr = set.iterator();
					while (itr.hasNext()) {
						UUID person = itr.next();

						ClubworkRecord record = clubwork.createClubworkRecord(UUID.randomUUID());
						record.setPersonId(person);
						record.setWorkDate(DataTypeDate.today());
						record.setDescription(International.getString("Übertrag"));

						Double hours = data.get(person);
						if(hours == null) {
							hours = new Double(0);
						}
						else if(hours > max) {
							record.setHours(sTransferableClubworkHours);
						}
						else if(hours < min) {
							record.setHours(-sTransferableClubworkHours);
						}
						else {
							record.setHours(hours-sDefaultClubworkTargetHours);
						}

						try {
							clubwork.data().add(record);
						} catch (Exception eignore) {
							Logger.logdebug(eignore);
						}
					}

					// Save Yearly Credit
					Vector<PersonRecord> persons = Daten.project.getPersons(false).getAllPersons(-1, false, false);

					Iterator<PersonRecord> personItr = persons.iterator();
					while (personItr.hasNext()) {
						PersonRecord person = personItr.next();

						ClubworkRecord record = clubwork.createClubworkRecord(UUID.randomUUID());
						record.setPersonId(person.getId());
						record.setWorkDate(DataTypeDate.today());
						record.setDescription(International.getString("Gutschrift (jährlich)"));
						record.setHours(person.getYearlyClubworkCredit());

						try {
							clubwork.data().add(record);
						} catch (Exception eignore) {
							Logger.logdebug(eignore);
						}
					}
				} catch (Exception e) {
					Logger.logdebug(e);
					Logger.log(Logger.ERROR, Logger.MSG_ERR_GENERIC,
							LogString.operationAborted(International.getString("Vereinsarbeit-Übertrag")));
					Messages messages = Daten.project.getMessages(false);
					messages.createAndSaveMessageRecord(Daten.EFA_SHORTNAME, MessageRecord.TO_ADMIN,
							International.getString("Vereinsarbeit-Übertrag"),
							International.getString("efa hat soeben versucht den Übertrag für die Vereinsarbeit zu berechnen.") + "\n"
									+ International.getString("Bei diesem Vorgang traten jedoch FEHLER auf.") + "\n\n"
									+ International.getString("Ein Protokoll ist in der Logdatei (Admin-Modus: Logdatei anzeigen) zu finden."));
				} finally {
					if (clubwork != null && lock >= 0) {
						clubwork.data().releaseGlobalLock(lock);
					}
				}
			}
		}
	}

// @clubwork: removed from EfaBoathouse.java (not needed any more?)
    public Clubwork openClubwork(AdminRecord admin) {
        try {
            if (Daten.project == null) {
                return null;
            }

            // close any other logbook first
            if (logbook != null) {
                try {
                    logbook.close();
                } catch (Exception e) {
                    String msg = LogString.fileCloseFailed(Daten.project.getProjectName(), International.getString("Fahrtenbuch"), e.toString());
                    Logger.log(Logger.ERROR, Logger.MSG_DATA_CLOSEFAILED, msg);
                    Logger.logdebug(e);
                    Dialog.error(msg);
                    logbook = null;
                }
            }

            // logbook to open
            String logbookName = null;
            if (admin == null && Daten.project.getCurrentLogbookEfaBoathouse() != null) {
                logbookName = Daten.project.getCurrentLogbookEfaBoathouse();
            }

            if (logbookName == null || logbookName.length() == 0) {
                if (admin != null && admin.isAllowedAdministerProjectLogbook()) {
                	// Give clubwork as Type parameter
                    OpenProjectOrLogbookDialog dlg = new OpenProjectOrLogbookDialog(this, OpenProjectOrLogbookDialog.Type.clubwork, admin);
                    logbookName = dlg.openDialog();
                }
            }
            if (logbookName == null || logbookName.length() == 0) {
                return null;
            }
            if (!openLogbook(logbookName)) {
                logbook = null;
                return null;
            }

            return Daten.project.getClubwork(logbookName, false);
        } finally {
            updateProjectLogbookInfo();
        }
    }

// @clubwork: removed from PersonEditDialog.java (has to be implemented somewhere else)
    protected boolean saveRecord() throws InvalidValueException {
    	PersonRecord personRecord = (PersonRecord)dataRecord;
    	double oldCredit = personRecord.getYearlyClubworkCredit();

    	boolean saved = super.saveRecord();
    	double credit = personRecord.getYearlyClubworkCredit();
    	Logbook logbook = Daten.project.getCurrentLogbook();
    	Clubwork clubwork = Daten.project.getClubwork(logbook.getName(), false);

        if (newRecord) {
            // save clubwork credit for getting into the club + yearly credit
            DataTypeDate date = new DataTypeDate(personRecord.getValidFrom());
            int month = date.getDay() < 15 ? date.getMonth()-1 : date.getMonth();

    	    	if(month > 0) {
	    	    	ClubworkRecord record = clubwork.createClubworkRecord(UUID.randomUUID());
	    	    	record.setPersonId(personRecord.getId());
	    	    	record.setWorkDate(date);
	    	    	record.setDescription(International.getString("Gutschrift für Vereinseintritt"));
	    	    	record.setHours(month*clubwork.getProjectRecord().getDefaultClubworkTargetHours()/12);

	    	    	try {
	    				clubwork.data().add(record);
	    	    	} catch (Exception eignore) {
	    	            Logger.logdebug(eignore);
	    	        }
    	    	}
    	    	if(credit != 0) {
	    	    	ClubworkRecord record = clubwork.createClubworkRecord(UUID.randomUUID());
	    	    	record.setPersonId(personRecord.getId());
	    	    	record.setWorkDate(date);
	    	    	record.setDescription(International.getString("Gutschrift (jährlich)"));
	    	    	record.setHours(credit);

	    	    	try {
	    				clubwork.data().add(record);
	    	    	} catch (Exception eignore) {
	    	            Logger.logdebug(eignore);
	    	        }
    	    	}
        }
        else {
        	if(credit != oldCredit) {
        		boolean found = false;
        		Vector<ClubworkRecord> clubworkRecords = clubwork.getAllClubworkRecords(-1, false, false);

        		for(ClubworkRecord record : clubworkRecords) {
        			if(record.getPersonId().equals(personRecord.getId()) && record.getDescription().startsWith(International.getString("Gutschrift (jährlich)"))) {
        				found = true;
        				record.setWorkDate(DataTypeDate.today());
        				record.setHours(credit);

        				try {
    	    				clubwork.data().update(record);
    	    	    	} catch (Exception eignore) {
    	    	            Logger.logdebug(eignore);
    	    	        }
        			}
        		}

        		if(!found) {
        			ClubworkRecord record = clubwork.createClubworkRecord(UUID.randomUUID());
	    	    	record.setPersonId(personRecord.getId());
	    	    	record.setWorkDate(DataTypeDate.today());
	    	    	record.setDescription(International.getString("Gutschrift (jährlich)"));
	    	    	record.setHours(credit);

	    	    	try {
	    				clubwork.data().add(record);
	    	    	} catch (Exception eignore) {
	    	            Logger.logdebug(eignore);
	    	        }
        		}
        	}
        }
        return saved;
    }
